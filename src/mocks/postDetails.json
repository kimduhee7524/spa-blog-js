{
  "postDetails": [
    {
      "id": 1,
      "title": "ESBuild를 위한 HMR, 직접 만들기",
      "author": "이코딩",
      "date": "2025년 3월 18일",
      "content": "ESBuild는 매우 빠른 자바스크립트 번들러로, 개발자들 사이에서 큰 인기를 얻고 있습니다. 하지만 Webpack과 같은 번들러와 달리 기본적으로 Hot Module Replacement(HMR) 기능을 제공하지 않습니다. 이 글에서는 ESBuild를 위한 HMR을 직접 구현하는 방법을 단계별로 알아보겠습니다. HMR이란 무엇인가? Hot Module Replacement(HMR)는 웹 애플리케이션이 실행 중인 상태에서 모듈을 교체, 추가 또는 제거할 수 있게 해주는 기능입니다. 개발 과정에서 전체 페이지를 새로고침하지 않고도 변경사항을 즉시 확인할 수 있어 개발 속도를 크게 향상시킵니다."
    },
    {
      "id": 2,
      "title": "자료구조를 활용한 복잡한 프론트엔드 컴포넌트 제작하기",
      "author": "박선영",
      "date": "2025년 3월 16일",
      "content": "프론트엔드 개발에서 복잡한 데이터 구조를 다루는 컴포넌트를 만들 때, 적절한 자료구조의 선택은 성능과 사용자 경험에 큰 영향을 미칩니다. 트리 구조와 프론트엔드: 웹 애플리케이션에서 메뉴, 파일 탐색기, 조직도 등 계층적 데이터를 표현할 때 트리 구조는 필수적입니다. 트리 구조를 효과적으로 구현하는 방법을 살펴보겠습니다. 렌더링 최적화 기법: 대규모 데이터셋을 다룰 때는 가상화(Virtualization), 메모이제이션, 지연 로딩과 같은 최적화 기법이 중요합니다."
    },
    {
      "id": 3,
      "title": "무엇이든 물어보세요 (feat. 테스트 코드, ESLint Rule) | EP.10 캠프파이어 특집 하편",
      "author": "테소 프론트엔드 팀디",
      "date": "2025년 2월 26일",
      "content": "안녕하세요, 테소 프론트엔드 팀디입니다! 이번 모닥불 캠프파이어 특집 하편에서는 시청자 여러분의 다양한 질문에 답변하는 시간을 가졌습니다. 테스트 코드 작성 전략: 많은 분들이 실무에서 테스트 코드 작성에 어려움을 겪고 계시더라고요. 저희 팀에서 사용하는 테스트 전략을 공유해드립니다. ESLint 커스텀 룰 만들기: 프로젝트 코드 컨벤션을 강제하기 위한 ESLint 커스텀 룰 작성법도 다뤘습니다. 특히 많은 관심을 받은 부분이었죠!"
    },
    {
      "id": 4,
      "title": "토스 피플: 방향은 내게 방향을 제시해주닿",
      "author": "김하늘",
      "date": "2025년 2월 17일",
      "content": "토스 디자인팀의 유하늘 디자이너님의 이야기를 담았습니다. 다양한 분야에서의 경험을 통해 디자인의 가치를 발견한 여정입니다. 도시에서 찾은 디자인의 가치: 유하늘 디자이너는 건축과 도시계획을 전공한 후, 우연한 기회에 UX 디자인을 접하게 되었습니다. 도시의 흐름과 사람들의 동선을 연구하던 경험이 디지털 제품의 사용자 경험 설계에 큰 도움이 되었다고 합니다. '도시는 거대한 인터페이스예요. 사람들이 어떻게 공간을 탐색하고 경험하는지 이해하는 것이 UX 디자인의 핵심이죠.'"
    },
    {
      "id": 5,
      "title": "무엇이든 물어보세요 (feat. 프론트엔드 코드, 디렉토리 관리) | EP.09 캠프파이어 특집 상편",
      "author": "테소 프론트엔드 팀디",
      "date": "2025년 2월 12일",
      "content": "안녕하세요, 테소 프론트엔드 팀디입니다! 이번 모닥불 캠프파이어 특집 상편에서는 프론트엔드 코드 구조와 디렉토리 관리에 관한 여러분의 질문에 답변했습니다. 프론트엔드 프로젝트 구조: 많은 분들이 프로젝트가 커질수록 코드 관리가 어려워진다는 고민을 공유해주셨습니다. 저희가 추천하는 구조는 src/ 디렉토리 아래에 assets/, components/, hooks/, pages/, services/, utils/ 등으로 구성하는 것입니다."
    }
  ]
}
